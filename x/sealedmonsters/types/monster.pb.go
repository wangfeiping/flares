// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sealedmonsters/v1beta/monster.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMonster struct {
	Id           string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Description  string                                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SolutionHash string                                        `protobuf:"bytes,4,opt,name=solutionHash,proto3" json:"solutionHash,omitempty"`
	Reward       string                                        `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	Solution     string                                        `protobuf:"bytes,6,opt,name=solution,proto3" json:"solution,omitempty"`
}

func (m *MsgMonster) Reset()         { *m = MsgMonster{} }
func (m *MsgMonster) String() string { return proto.CompactTextString(m) }
func (*MsgMonster) ProtoMessage()    {}
func (*MsgMonster) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d1bca1f8ece5a7, []int{0}
}
func (m *MsgMonster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMonster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMonster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMonster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMonster.Merge(m, src)
}
func (m *MsgMonster) XXX_Size() int {
	return m.Size()
}
func (m *MsgMonster) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMonster.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMonster proto.InternalMessageInfo

func (m *MsgMonster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgMonster) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgMonster) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgMonster) GetSolutionHash() string {
	if m != nil {
		return m.SolutionHash
	}
	return ""
}

func (m *MsgMonster) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *MsgMonster) GetSolution() string {
	if m != nil {
		return m.Solution
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgMonster)(nil), "flares.sealedmonsters.v1beta1.MsgMonster")
}

func init() {
	proto.RegisterFile("sealedmonsters/v1beta/monster.proto", fileDescriptor_d8d1bca1f8ece5a7)
}

var fileDescriptor_d8d1bca1f8ece5a7 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4e, 0x42, 0x31,
	0x18, 0x85, 0x29, 0x2a, 0x6a, 0x25, 0x0e, 0x8d, 0x31, 0x0d, 0x89, 0x95, 0xe0, 0xc2, 0xc2, 0x6d,
	0x88, 0xbe, 0x00, 0x4c, 0x26, 0x06, 0x07, 0x46, 0xb7, 0xd2, 0x96, 0xd2, 0x08, 0xb7, 0x37, 0xfd,
	0x8b, 0xe8, 0x5b, 0xf8, 0x58, 0x8e, 0x8c, 0x4e, 0xc6, 0xdc, 0xfb, 0x16, 0x4e, 0x86, 0xde, 0x8b,
	0x01, 0xa7, 0xfe, 0xe7, 0x3f, 0x5f, 0xdb, 0x9c, 0x83, 0x6f, 0x40, 0x8b, 0xb9, 0x56, 0x0b, 0x97,
	0x42, 0xd0, 0x1e, 0xf8, 0x4b, 0x7f, 0xa2, 0x83, 0xe0, 0x95, 0x4e, 0x32, 0xef, 0x82, 0x23, 0x57,
	0xd3, 0xb9, 0xf0, 0x1a, 0x92, 0x7d, 0x36, 0x29, 0xd9, 0x7e, 0xeb, 0xc2, 0x38, 0xe3, 0x22, 0xc9,
	0x37, 0x53, 0x79, 0xa9, 0x53, 0x20, 0x8c, 0x47, 0x60, 0x46, 0x25, 0x4d, 0xce, 0x71, 0xdd, 0x2a,
	0x8a, 0xda, 0xa8, 0x7b, 0x3a, 0xae, 0x5b, 0x45, 0x1e, 0xf0, 0xb1, 0xf4, 0x5a, 0x04, 0xe7, 0x69,
	0xbd, 0x8d, 0xba, 0xcd, 0x61, 0xff, 0xe7, 0xeb, 0xba, 0x67, 0x6c, 0x98, 0x2d, 0x27, 0x89, 0x74,
	0x0b, 0x2e, 0x1d, 0x2c, 0x1c, 0x54, 0x47, 0x0f, 0xd4, 0x33, 0x0f, 0x6f, 0x99, 0x86, 0x64, 0x20,
	0xe5, 0x40, 0x29, 0xaf, 0x01, 0xc6, 0xdb, 0x17, 0x48, 0x1b, 0x9f, 0x29, 0x0d, 0xd2, 0xdb, 0x2c,
	0x58, 0x97, 0xd2, 0x83, 0xf8, 0xcb, 0xee, 0x8a, 0x74, 0x70, 0x13, 0xdc, 0x7c, 0xb9, 0x99, 0xef,
	0x05, 0xcc, 0xe8, 0x61, 0x44, 0xf6, 0x76, 0xe4, 0x12, 0x37, 0xbc, 0x5e, 0x09, 0xaf, 0xe8, 0x51,
	0x74, 0x2b, 0x45, 0x5a, 0xf8, 0x64, 0xcb, 0xd1, 0x46, 0x74, 0xfe, 0xf4, 0xf0, 0xf1, 0x23, 0x67,
	0x68, 0x9d, 0x33, 0xf4, 0x9d, 0x33, 0xf4, 0x5e, 0xb0, 0xda, 0xba, 0x60, 0xb5, 0xcf, 0x82, 0xd5,
	0x9e, 0xee, 0x76, 0xb2, 0xac, 0x44, 0x6a, 0xa6, 0xda, 0x66, 0x36, 0x35, 0xbc, 0xec, 0x92, 0xbf,
	0xf2, 0x7f, 0xcd, 0xc7, 0x74, 0x93, 0x46, 0x2c, 0xef, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x7f,
	0x8b, 0x39, 0x94, 0x98, 0x01, 0x00, 0x00,
}

func (m *MsgMonster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMonster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMonster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Solution) > 0 {
		i -= len(m.Solution)
		copy(dAtA[i:], m.Solution)
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Solution)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SolutionHash) > 0 {
		i -= len(m.SolutionHash)
		copy(dAtA[i:], m.SolutionHash)
		i = encodeVarintMonster(dAtA, i, uint64(len(m.SolutionHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonster(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMonster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.SolutionHash)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.Solution)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	return n
}

func sovMonster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonster(x uint64) (n int) {
	return sovMonster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMonster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMonster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMonster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolutionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SolutionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Solution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonster
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonster
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonster
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonster        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonster          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonster = fmt.Errorf("proto: unexpected end of group")
)
