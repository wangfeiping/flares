// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nameservice/v1beta/name.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgName struct {
	Id      string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Value   string                                        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Price   string                                        `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *MsgName) Reset()         { *m = MsgName{} }
func (m *MsgName) String() string { return proto.CompactTextString(m) }
func (*MsgName) ProtoMessage()    {}
func (*MsgName) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b076132985dc88f, []int{0}
}
func (m *MsgName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgName.Merge(m, src)
}
func (m *MsgName) XXX_Size() int {
	return m.Size()
}
func (m *MsgName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgName proto.InternalMessageInfo

func (m *MsgName) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgName) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MsgName) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgName)(nil), "flares.nameservice.v1beta1.MsgName")
}

func init() { proto.RegisterFile("nameservice/v1beta/name.proto", fileDescriptor_9b076132985dc88f) }

var fileDescriptor_9b076132985dc88f = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x8d, 0xf3, 0x7d, 0x50, 0x61, 0x21, 0x86, 0xa8, 0x43, 0x54, 0x09, 0x53, 0x31, 0x75, 0xa9,
	0xad, 0x88, 0x5f, 0xd0, 0xae, 0x15, 0x0c, 0x1d, 0xd9, 0x1c, 0xfb, 0x6a, 0x2c, 0x9a, 0x38, 0xb2,
	0xdd, 0x00, 0xff, 0x02, 0xf1, 0xab, 0x18, 0x3b, 0x32, 0x21, 0x94, 0xfc, 0x0b, 0x26, 0x14, 0x1b,
	0xa4, 0x4c, 0x77, 0xef, 0xe9, 0xdd, 0xbb, 0x7b, 0x87, 0x2f, 0x6b, 0x5e, 0x81, 0x03, 0xdb, 0x6a,
	0x01, 0xac, 0x2d, 0x4a, 0xf0, 0x9c, 0x0d, 0x14, 0x6d, 0xac, 0xf1, 0x26, 0x9b, 0xed, 0xf6, 0xdc,
	0x82, 0xa3, 0x23, 0x15, 0x8d, 0xaa, 0x62, 0x36, 0x55, 0x46, 0x99, 0x20, 0x63, 0x43, 0x17, 0x27,
	0xae, 0xdf, 0x10, 0x9e, 0xdc, 0x3a, 0x75, 0xc7, 0x2b, 0xc8, 0x2e, 0x70, 0xaa, 0x65, 0x8e, 0xe6,
	0x68, 0x71, 0xb6, 0x4d, 0xb5, 0xcc, 0x36, 0x78, 0x22, 0x2c, 0x70, 0x6f, 0x6c, 0x9e, 0xce, 0xd1,
	0xe2, 0x7c, 0x5d, 0x7c, 0x7f, 0x5e, 0x2d, 0x95, 0xf6, 0x0f, 0x87, 0x92, 0x0a, 0x53, 0x31, 0x61,
	0x5c, 0x65, 0xdc, 0x6f, 0x59, 0x3a, 0xf9, 0xc8, 0xfc, 0x4b, 0x03, 0x8e, 0xae, 0x84, 0x58, 0x49,
	0x69, 0xc1, 0xb9, 0xed, 0x9f, 0x43, 0x36, 0xc5, 0x27, 0x2d, 0xdf, 0x1f, 0x20, 0xff, 0x17, 0xfc,
	0x23, 0x18, 0xd8, 0xc6, 0x6a, 0x01, 0xf9, 0xff, 0xc8, 0x06, 0xb0, 0xde, 0xbc, 0x77, 0x04, 0x1d,
	0x3b, 0x82, 0xbe, 0x3a, 0x82, 0x5e, 0x7b, 0x92, 0x1c, 0x7b, 0x92, 0x7c, 0xf4, 0x24, 0xb9, 0x2f,
	0x46, 0xdb, 0x9f, 0x78, 0xad, 0x76, 0xa0, 0x1b, 0x5d, 0x2b, 0x16, 0x73, 0xb3, 0x67, 0x36, 0xfe,
	0x4f, 0x38, 0xa6, 0x3c, 0x0d, 0x41, 0x6f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x5d, 0x82,
	0x38, 0x3b, 0x01, 0x00, 0x00,
}

func (m *MsgName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintName(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintName(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintName(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintName(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintName(dAtA []byte, offset int, v uint64) int {
	offset -= sovName(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	return n
}

func sovName(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozName(x uint64) (n int) {
	return sovName(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowName
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipName(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipName(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowName
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowName
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowName
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthName
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupName
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthName
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthName        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowName          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupName = fmt.Errorf("proto: unexpected end of group")
)
