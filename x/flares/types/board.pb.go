// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flares/v1beta/board.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgBoard struct {
	Id            string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Base          string                                        `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	BaseDenom     string                                        `protobuf:"bytes,4,opt,name=baseDenom,proto3" json:"baseDenom,omitempty"`
	BaseAddress   string                                        `protobuf:"bytes,5,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	Accept        string                                        `protobuf:"bytes,6,opt,name=accept,proto3" json:"accept,omitempty"`
	AcceptDenom   string                                        `protobuf:"bytes,7,opt,name=acceptDenom,proto3" json:"acceptDenom,omitempty"`
	AcceptAddress string                                        `protobuf:"bytes,8,opt,name=acceptAddress,proto3" json:"acceptAddress,omitempty"`
	Source        string                                        `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *MsgBoard) Reset()         { *m = MsgBoard{} }
func (m *MsgBoard) String() string { return proto.CompactTextString(m) }
func (*MsgBoard) ProtoMessage()    {}
func (*MsgBoard) Descriptor() ([]byte, []int) {
	return fileDescriptor_affc92df03f6e53f, []int{0}
}
func (m *MsgBoard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBoard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBoard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBoard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBoard.Merge(m, src)
}
func (m *MsgBoard) XXX_Size() int {
	return m.Size()
}
func (m *MsgBoard) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBoard.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBoard proto.InternalMessageInfo

func (m *MsgBoard) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgBoard) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgBoard) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *MsgBoard) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *MsgBoard) GetBaseAddress() string {
	if m != nil {
		return m.BaseAddress
	}
	return ""
}

func (m *MsgBoard) GetAccept() string {
	if m != nil {
		return m.Accept
	}
	return ""
}

func (m *MsgBoard) GetAcceptDenom() string {
	if m != nil {
		return m.AcceptDenom
	}
	return ""
}

func (m *MsgBoard) GetAcceptAddress() string {
	if m != nil {
		return m.AcceptAddress
	}
	return ""
}

func (m *MsgBoard) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgBoard)(nil), "flares.flares.v1beta1.MsgBoard")
}

func init() { proto.RegisterFile("flares/v1beta/board.proto", fileDescriptor_affc92df03f6e53f) }

var fileDescriptor_affc92df03f6e53f = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0xbb, 0x4e, 0xf3, 0x30,
	0x14, 0xae, 0xf3, 0xf7, 0xef, 0xc5, 0x5c, 0x06, 0x0b, 0x90, 0x41, 0xc8, 0x54, 0x88, 0xa1, 0x03,
	0x8d, 0x55, 0xf1, 0x04, 0xad, 0x10, 0x0b, 0x62, 0xe9, 0xc8, 0xe6, 0xd8, 0xae, 0x89, 0xa0, 0x75,
	0x64, 0xbb, 0x5c, 0xde, 0x82, 0x77, 0xe1, 0x25, 0x18, 0x3b, 0x32, 0x21, 0xd4, 0xbc, 0x05, 0x13,
	0xb2, 0x9d, 0x88, 0x30, 0x9d, 0xef, 0x76, 0xbe, 0xe1, 0x1c, 0x78, 0x38, 0x7f, 0x60, 0x46, 0x5a,
	0xfa, 0x38, 0xce, 0xa4, 0x63, 0x34, 0xd3, 0xcc, 0x88, 0xb4, 0x30, 0xda, 0x69, 0xb4, 0x1f, 0xad,
	0xb4, 0x1a, 0x31, 0x31, 0x3e, 0xda, 0x53, 0x5a, 0xe9, 0x90, 0xa0, 0x1e, 0xc5, 0xf0, 0xe9, 0x5b,
	0x02, 0x7b, 0x37, 0x56, 0x4d, 0xfd, 0x3e, 0xda, 0x85, 0x49, 0x2e, 0x30, 0x18, 0x80, 0x61, 0x7f,
	0x96, 0xe4, 0x02, 0x5d, 0xc3, 0x2e, 0x37, 0x92, 0x39, 0x6d, 0x70, 0x32, 0x00, 0xc3, 0xed, 0xe9,
	0xf8, 0xfb, 0xf3, 0x64, 0xa4, 0x72, 0x77, 0xb7, 0xca, 0x52, 0xae, 0x17, 0x94, 0x6b, 0xbb, 0xd0,
	0xb6, 0x1a, 0x23, 0x2b, 0xee, 0xa9, 0x7b, 0x29, 0xa4, 0x4d, 0x27, 0x9c, 0x4f, 0x84, 0x30, 0xd2,
	0xda, 0x59, 0xdd, 0x80, 0x10, 0x6c, 0x67, 0xcc, 0x4a, 0xfc, 0x2f, 0xd4, 0x07, 0x8c, 0x8e, 0x61,
	0xdf, 0xcf, 0x4b, 0xb9, 0xd4, 0x0b, 0xdc, 0x0e, 0xc6, 0xaf, 0x80, 0x06, 0x70, 0xcb, 0x93, 0xaa,
	0x09, 0xff, 0x0f, 0x7e, 0x53, 0x42, 0x07, 0xb0, 0xc3, 0x38, 0x97, 0x85, 0xc3, 0x9d, 0x60, 0x56,
	0xcc, 0x6f, 0x46, 0x14, 0x9b, 0xbb, 0x71, 0xb3, 0x21, 0xa1, 0x33, 0xb8, 0x13, 0x69, 0xdd, 0xde,
	0x0b, 0x99, 0xbf, 0xa2, 0xef, 0xb7, 0x7a, 0x65, 0xb8, 0xc4, 0xfd, 0xd8, 0x1f, 0xd9, 0xf4, 0xea,
	0x7d, 0x43, 0xc0, 0x7a, 0x43, 0xc0, 0xd7, 0x86, 0x80, 0xd7, 0x92, 0xb4, 0xd6, 0x25, 0x69, 0x7d,
	0x94, 0xa4, 0x75, 0x7b, 0xde, 0xb8, 0xce, 0x13, 0x5b, 0xaa, 0xb9, 0xcc, 0x8b, 0x7c, 0xa9, 0x68,
	0xf5, 0xae, 0xe7, 0x1a, 0x84, 0x3b, 0x65, 0x9d, 0xf0, 0x84, 0x8b, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xbf, 0x6a, 0x54, 0xc7, 0xce, 0x01, 0x00, 0x00,
}

func (m *MsgBoard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBoard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBoard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AcceptAddress) > 0 {
		i -= len(m.AcceptAddress)
		copy(dAtA[i:], m.AcceptAddress)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.AcceptAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AcceptDenom) > 0 {
		i -= len(m.AcceptDenom)
		copy(dAtA[i:], m.AcceptDenom)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.AcceptDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Accept) > 0 {
		i -= len(m.Accept)
		copy(dAtA[i:], m.Accept)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Accept)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BaseAddress) > 0 {
		i -= len(m.BaseAddress)
		copy(dAtA[i:], m.BaseAddress)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.BaseAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBoard(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBoard(dAtA []byte, offset int, v uint64) int {
	offset -= sovBoard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBoard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.BaseAddress)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.Accept)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.AcceptDenom)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.AcceptAddress)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovBoard(uint64(l))
	}
	return n
}

func sovBoard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBoard(x uint64) (n int) {
	return sovBoard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBoard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBoard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBoard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBoard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accept = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBoard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBoard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBoard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBoard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBoard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBoard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBoard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBoard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBoard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBoard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBoard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBoard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBoard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBoard = fmt.Errorf("proto: unexpected end of group")
)
