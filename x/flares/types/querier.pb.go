// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flares/v1beta/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryAllContractTransferRecordRequest struct {
	Receiver   string             `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractTransferRecordRequest) Reset()         { *m = QueryAllContractTransferRecordRequest{} }
func (m *QueryAllContractTransferRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractTransferRecordRequest) ProtoMessage()    {}
func (*QueryAllContractTransferRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21aae90d47d8cf2, []int{0}
}
func (m *QueryAllContractTransferRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractTransferRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractTransferRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractTransferRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractTransferRecordRequest.Merge(m, src)
}
func (m *QueryAllContractTransferRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractTransferRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractTransferRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractTransferRecordRequest proto.InternalMessageInfo

func (m *QueryAllContractTransferRecordRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *QueryAllContractTransferRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractTransferRecordResponse struct {
	ContractTransferRecord []*MsgContractTransferRecord `protobuf:"bytes,1,rep,name=contractTransferRecord,proto3" json:"contractTransferRecord,omitempty"`
	Pagination             *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractTransferRecordResponse) Reset() {
	*m = QueryAllContractTransferRecordResponse{}
}
func (m *QueryAllContractTransferRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractTransferRecordResponse) ProtoMessage()    {}
func (*QueryAllContractTransferRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21aae90d47d8cf2, []int{1}
}
func (m *QueryAllContractTransferRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractTransferRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractTransferRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractTransferRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractTransferRecordResponse.Merge(m, src)
}
func (m *QueryAllContractTransferRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractTransferRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractTransferRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractTransferRecordResponse proto.InternalMessageInfo

func (m *QueryAllContractTransferRecordResponse) GetContractTransferRecord() []*MsgContractTransferRecord {
	if m != nil {
		return m.ContractTransferRecord
	}
	return nil
}

func (m *QueryAllContractTransferRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBoardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBoardRequest) Reset()         { *m = QueryAllBoardRequest{} }
func (m *QueryAllBoardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBoardRequest) ProtoMessage()    {}
func (*QueryAllBoardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21aae90d47d8cf2, []int{2}
}
func (m *QueryAllBoardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBoardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBoardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBoardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBoardRequest.Merge(m, src)
}
func (m *QueryAllBoardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBoardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBoardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBoardRequest proto.InternalMessageInfo

func (m *QueryAllBoardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBoardResponse struct {
	Board      []*MsgBoard         `protobuf:"bytes,1,rep,name=board,proto3" json:"board,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBoardResponse) Reset()         { *m = QueryAllBoardResponse{} }
func (m *QueryAllBoardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBoardResponse) ProtoMessage()    {}
func (*QueryAllBoardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21aae90d47d8cf2, []int{3}
}
func (m *QueryAllBoardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBoardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBoardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBoardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBoardResponse.Merge(m, src)
}
func (m *QueryAllBoardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBoardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBoardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBoardResponse proto.InternalMessageInfo

func (m *QueryAllBoardResponse) GetBoard() []*MsgBoard {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *QueryAllBoardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractRequest struct {
	State      string             `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractRequest) Reset()         { *m = QueryAllContractRequest{} }
func (m *QueryAllContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractRequest) ProtoMessage()    {}
func (*QueryAllContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21aae90d47d8cf2, []int{4}
}
func (m *QueryAllContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractRequest.Merge(m, src)
}
func (m *QueryAllContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractRequest proto.InternalMessageInfo

func (m *QueryAllContractRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *QueryAllContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractResponse struct {
	Contract   []*MsgContract      `protobuf:"bytes,1,rep,name=contract,proto3" json:"contract,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractResponse) Reset()         { *m = QueryAllContractResponse{} }
func (m *QueryAllContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractResponse) ProtoMessage()    {}
func (*QueryAllContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d21aae90d47d8cf2, []int{5}
}
func (m *QueryAllContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractResponse.Merge(m, src)
}
func (m *QueryAllContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractResponse proto.InternalMessageInfo

func (m *QueryAllContractResponse) GetContract() []*MsgContract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *QueryAllContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAllContractTransferRecordRequest)(nil), "flares.flares.v1beta1.QueryAllContractTransferRecordRequest")
	proto.RegisterType((*QueryAllContractTransferRecordResponse)(nil), "flares.flares.v1beta1.QueryAllContractTransferRecordResponse")
	proto.RegisterType((*QueryAllBoardRequest)(nil), "flares.flares.v1beta1.QueryAllBoardRequest")
	proto.RegisterType((*QueryAllBoardResponse)(nil), "flares.flares.v1beta1.QueryAllBoardResponse")
	proto.RegisterType((*QueryAllContractRequest)(nil), "flares.flares.v1beta1.QueryAllContractRequest")
	proto.RegisterType((*QueryAllContractResponse)(nil), "flares.flares.v1beta1.QueryAllContractResponse")
}

func init() { proto.RegisterFile("flares/v1beta/querier.proto", fileDescriptor_d21aae90d47d8cf2) }

var fileDescriptor_d21aae90d47d8cf2 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0x54, 0x22, 0xf1, 0xe5, 0x36, 0xb4, 0x9a, 0xae, 0xb2, 0x86, 0x80, 0x35, 0xd4, 0x32,
	0x6b, 0x22, 0xde, 0x54, 0xb0, 0x42, 0x3d, 0x09, 0xba, 0x78, 0xf2, 0x20, 0xcc, 0xae, 0x2f, 0xdb,
	0x85, 0x74, 0x67, 0x3b, 0x33, 0x69, 0xed, 0x6f, 0xf0, 0xe2, 0x4d, 0xef, 0xfe, 0x19, 0x8f, 0x3d,
	0x0a, 0x5e, 0x24, 0xf9, 0x15, 0xde, 0x24, 0x3b, 0x33, 0x31, 0x69, 0x77, 0x49, 0x08, 0x39, 0x25,
	0xc3, 0xbc, 0xf7, 0xbd, 0xef, 0xfb, 0xde, 0xb7, 0x03, 0x77, 0x07, 0x43, 0x2e, 0x51, 0x05, 0x67,
	0xbd, 0x08, 0x35, 0x0f, 0x4e, 0x47, 0x28, 0x53, 0x94, 0x2c, 0x97, 0x42, 0x0b, 0xba, 0x63, 0x2e,
	0x99, 0xfd, 0x31, 0x35, 0x3d, 0x6f, 0x3f, 0x16, 0xea, 0x44, 0xa8, 0x20, 0xe2, 0x0a, 0x8b, 0x8e,
	0x0b, 0xdb, 0xde, 0x0b, 0x72, 0x9e, 0xa4, 0x19, 0xd7, 0xa9, 0xc8, 0x0c, 0x84, 0xb7, 0xbf, 0x88,
	0x1f, 0x8b, 0x4c, 0x4b, 0x1e, 0xeb, 0xf7, 0x92, 0x67, 0x6a, 0x80, 0x32, 0xc4, 0x58, 0xc8, 0x4f,
	0xb6, 0x76, 0x77, 0xb1, 0x36, 0x12, 0x7c, 0x76, 0x75, 0xaf, 0x1c, 0xc6, 0xdc, 0x76, 0xbe, 0x10,
	0x78, 0xf0, 0x6e, 0xca, 0xe3, 0xe5, 0x70, 0xf8, 0xaa, 0x74, 0x42, 0x88, 0xa7, 0x23, 0x54, 0x9a,
	0x7a, 0xd0, 0x90, 0x18, 0x63, 0x7a, 0x86, 0xb2, 0x45, 0xda, 0xa4, 0x7b, 0x2b, 0x9c, 0x9d, 0xe9,
	0x11, 0xc0, 0x7f, 0xfa, 0xad, 0xad, 0x36, 0xe9, 0x36, 0xfb, 0x7b, 0xcc, 0x68, 0x65, 0x53, 0xad,
	0xac, 0xd0, 0xea, 0x6c, 0x60, 0x6f, 0x79, 0x82, 0x16, 0x37, 0x9c, 0xeb, 0xec, 0xfc, 0x26, 0xb0,
	0xb7, 0x8c, 0x8d, 0xca, 0x45, 0xa6, 0x90, 0x1e, 0xc3, 0xed, 0x72, 0x47, 0x5a, 0xa4, 0x7d, 0xa3,
	0xdb, 0xec, 0x3f, 0x66, 0xa5, 0x1b, 0x60, 0x6f, 0x54, 0x52, 0x81, 0x5c, 0x81, 0x47, 0x5f, 0x97,
	0x88, 0x7b, 0xb8, 0x54, 0x9c, 0xa1, 0xb9, 0xa0, 0xee, 0x23, 0x6c, 0x3b, 0x71, 0x87, 0xd3, 0x05,
	0x39, 0x67, 0x17, 0xdd, 0x23, 0x6b, 0xbb, 0xf7, 0x8d, 0xc0, 0xce, 0x95, 0x01, 0xd6, 0xac, 0xa7,
	0x50, 0x2f, 0x22, 0x61, 0xbd, 0xb9, 0x5f, 0xed, 0x8d, 0xe9, 0x33, 0xd5, 0x9b, 0x53, 0x7e, 0x0e,
	0x77, 0xae, 0xae, 0xd5, 0x89, 0xdf, 0x86, 0xba, 0xd2, 0x5c, 0xa3, 0xcd, 0x94, 0x39, 0x6c, 0x2c,
	0x50, 0x3f, 0x08, 0xb4, 0xae, 0x4f, 0xb6, 0xae, 0xbc, 0x80, 0x86, 0x5b, 0xb9, 0x35, 0xa6, 0xb3,
	0x3c, 0x34, 0xe1, 0xac, 0x67, 0x63, 0xf6, 0xf4, 0xff, 0x6e, 0x41, 0xbd, 0x60, 0x49, 0xbf, 0x13,
	0xd8, 0xad, 0xcc, 0x3e, 0x7d, 0x56, 0x41, 0x6f, 0xa5, 0x0f, 0xd8, 0x7b, 0xbe, 0x66, 0xb7, 0x75,
	0x0b, 0xa1, 0xe1, 0x72, 0x45, 0x1f, 0x2d, 0x81, 0x9a, 0x8f, 0xb7, 0x77, 0xb0, 0x5a, 0xb1, 0x1d,
	0x93, 0x41, 0x73, 0x8e, 0x0b, 0x65, 0x2b, 0x92, 0x76, 0xc3, 0x82, 0x95, 0xeb, 0xcd, 0xbc, 0xc3,
	0xa3, 0x9f, 0x63, 0x9f, 0x5c, 0x8e, 0x7d, 0xf2, 0x67, 0xec, 0x93, 0xaf, 0x13, 0xbf, 0x76, 0x39,
	0xf1, 0x6b, 0xbf, 0x26, 0x7e, 0xed, 0xc3, 0x41, 0x92, 0xea, 0xe3, 0x51, 0xc4, 0x62, 0x71, 0x12,
	0x9c, 0xf3, 0x2c, 0x19, 0x60, 0x9a, 0xa7, 0x59, 0x12, 0xd8, 0xf7, 0xf4, 0xb3, 0xfb, 0xa3, 0x2f,
	0x72, 0x54, 0xd1, 0xcd, 0xe2, 0x3d, 0x7d, 0xf2, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x92, 0xab, 0x25,
	0xed, 0x16, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	AllContractTransferRecord(ctx context.Context, in *QueryAllContractTransferRecordRequest, opts ...grpc.CallOption) (*QueryAllContractTransferRecordResponse, error)
	AllBoard(ctx context.Context, in *QueryAllBoardRequest, opts ...grpc.CallOption) (*QueryAllBoardResponse, error)
	AllContract(ctx context.Context, in *QueryAllContractRequest, opts ...grpc.CallOption) (*QueryAllContractResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllContractTransferRecord(ctx context.Context, in *QueryAllContractTransferRecordRequest, opts ...grpc.CallOption) (*QueryAllContractTransferRecordResponse, error) {
	out := new(QueryAllContractTransferRecordResponse)
	err := c.cc.Invoke(ctx, "/flares.flares.v1beta1.Query/AllContractTransferRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllBoard(ctx context.Context, in *QueryAllBoardRequest, opts ...grpc.CallOption) (*QueryAllBoardResponse, error) {
	out := new(QueryAllBoardResponse)
	err := c.cc.Invoke(ctx, "/flares.flares.v1beta1.Query/AllBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllContract(ctx context.Context, in *QueryAllContractRequest, opts ...grpc.CallOption) (*QueryAllContractResponse, error) {
	out := new(QueryAllContractResponse)
	err := c.cc.Invoke(ctx, "/flares.flares.v1beta1.Query/AllContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	AllContractTransferRecord(context.Context, *QueryAllContractTransferRecordRequest) (*QueryAllContractTransferRecordResponse, error)
	AllBoard(context.Context, *QueryAllBoardRequest) (*QueryAllBoardResponse, error)
	AllContract(context.Context, *QueryAllContractRequest) (*QueryAllContractResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllContractTransferRecord(ctx context.Context, req *QueryAllContractTransferRecordRequest) (*QueryAllContractTransferRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllContractTransferRecord not implemented")
}
func (*UnimplementedQueryServer) AllBoard(ctx context.Context, req *QueryAllBoardRequest) (*QueryAllBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBoard not implemented")
}
func (*UnimplementedQueryServer) AllContract(ctx context.Context, req *QueryAllContractRequest) (*QueryAllContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllContract not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllContractTransferRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractTransferRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllContractTransferRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flares.flares.v1beta1.Query/AllContractTransferRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllContractTransferRecord(ctx, req.(*QueryAllContractTransferRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flares.flares.v1beta1.Query/AllBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllBoard(ctx, req.(*QueryAllBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flares.flares.v1beta1.Query/AllContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllContract(ctx, req.(*QueryAllContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flares.flares.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllContractTransferRecord",
			Handler:    _Query_AllContractTransferRecord_Handler,
		},
		{
			MethodName: "AllBoard",
			Handler:    _Query_AllBoard_Handler,
		},
		{
			MethodName: "AllContract",
			Handler:    _Query_AllContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flares/v1beta/querier.proto",
}

func (m *QueryAllContractTransferRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractTransferRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractTransferRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractTransferRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractTransferRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractTransferRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractTransferRecord) > 0 {
		for iNdEx := len(m.ContractTransferRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractTransferRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBoardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBoardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBoardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBoardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBoardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBoardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Board) > 0 {
		for iNdEx := len(m.Board) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Board[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		for iNdEx := len(m.Contract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllContractTransferRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllContractTransferRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractTransferRecord) > 0 {
		for _, e := range m.ContractTransferRecord {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllBoardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllBoardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Board) > 0 {
		for _, e := range m.Board {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contract) > 0 {
		for _, e := range m.Contract {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllContractTransferRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractTransferRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractTransferRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractTransferRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractTransferRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractTransferRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTransferRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTransferRecord = append(m.ContractTransferRecord, &MsgContractTransferRecord{})
			if err := m.ContractTransferRecord[len(m.ContractTransferRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBoardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBoardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBoardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBoardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBoardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBoardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Board = append(m.Board, &MsgBoard{})
			if err := m.Board[len(m.Board)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract, &MsgContract{})
			if err := m.Contract[len(m.Contract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
